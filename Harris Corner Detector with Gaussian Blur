#!/usr/bin/python3 
import cv2
import numpy as np
import pyzed.sl as sl

# Load image
img = cv2.imread('/home/seal/SEAL-Development/Corner Detector/beachpic.png')

# Get image dimensions
height, width, _ = img.shape
mid_x = width // 2

# Split into left and right halves
left_half = img[:, :mid_x]
right_half = img[:, mid_x:]

# Convert to grayscale
gray_left = cv2.cvtColor(left_half, cv2.COLOR_BGR2GRAY)
gray_right = cv2.cvtColor(right_half, cv2.COLOR_BGR2GRAY)

# Noise suppression
kernal_size = 11 # Size of filter window (the square patch of pixels used to calculate the blur for each pixel) MUST BE ODD. EX: (3, 3) means 3x3 square
sigma = 2 # Standard deviation (how much the surrounding pixels affect the blur)
gray_left = cv2.GaussianBlur(gray_left, (kernal_size, kernal_size), sigma)
gray_right = cv2.GaussianBlur(gray_right, (kernal_size, kernal_size), sigma)

# Convert to float32
gray_left = np.float32(gray_left)
gray_right = np.float32(gray_right)

# Harris corner detection
dst_left = cv2.cornerHarris(gray_left, blockSize=2, ksize=3, k=0.04)
dst_right = cv2.cornerHarris(gray_right, blockSize=2, ksize=3, k=0.04)

# Dilate result to mark corners
dst_left = cv2.dilate(dst_left, None)
dst_right = cv2.dilate(dst_right, None)

# Copy original halves for visualization
left_vis = left_half.copy()
right_vis = right_half.copy()

# Mark corners in red
left_vis[dst_left > 0.005 * dst_left.max()] = [0, 0, 255]
right_vis[dst_right > 0.005 * dst_right.max()] = [0, 0, 255]

# Show results
cv2.imshow("Left Half Corners", left_vis)
cv2.imshow("Right Half Corners", right_vis)
cv2.waitKey(0)
cv2.destroyAllWindows()
